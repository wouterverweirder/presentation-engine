{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/es6-promise/dist/es6-promise.js","node_modules/isomorphic-fetch/fetch-npm-browserify.js","node_modules/process/browser.js","node_modules/whatwg-fetch/fetch.js","src/presentation/js/classes/MobileServerBridge.js","src/presentation/js/classes/NodeAppRunner.js","src/presentation/js/classes/Presentation.js","src/presentation/js/classes/SlideBridge.js","src/presentation/js/classes/live-code/CodeElement.js","src/presentation/js/classes/live-code/ConsoleElement.js","src/presentation/js/classes/live-code/TerminalElement.js","src/presentation/js/classes/live-code/WebPreviewElement.js","src/presentation/js/classes/live-code/WebcamElement.js","src/presentation/js/classes/live-code/index.js","src/presentation/js/script.js","src/server/classes/SlidesFolderParser.js","src/shared/js/Constants.js","src/shared/js/classes/ContentBase.js","src/shared/js/classes/MobileServerBridge.js","src/shared/js/classes/Presentation.js","src/shared/js/classes/SlideBridge.js","src/presentation/js/classes/live-code-slide/index.js","src/presentation/js/classes/video-slide/index.js"],"names":[],"mappingsroCA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxcA;;;;AACA;;;;;;;;;;IAEqB,kB;;;AAEnB,8BAAY,YAAZ,EAA0B,QAA1B,EAAoC;AAAA;;AAAA,wIAC5B,YAD4B,EACd,QADc;;AAElC,SAAK,EAAL,CAAQ,MAAK,YAAb,EAA2B,qBAAU,uBAArC,EAA8D,MAAK,wBAAL,CAA8B,IAA9B,OAA9D;AAFkC;AAGnC;;;;2CAEsB;AACrB;AACA,WAAK,SAA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","file":"script.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   4.1.1\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.ES6Promise = factory());\n}(this, (function () { 'use strict';\n\nfunction objectOrFunction(x) {\n  var type = typeof x;\n  return x !== null && (type === 'object' || type === 'function');\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\nvar _isArray = undefined;\nif (Array.isArray) {\n  _isArray = Array.isArray;\n} else {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n}\n\nvar isArray = _isArray;\n\nvar len = 0;\nvar vertxNext = undefined;\nvar customSchedulerFn = undefined;\n\nvar asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nfunction setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nfunction setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var r = require;\n    var vertx = r('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = undefined;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && typeof require === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}\n\nfunction then(onFulfillment, onRejection) {\n  var _arguments = arguments;\n\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n  if (_state) {\n    (function () {\n      var callback = _arguments[_state - 1];\n      asap(function () {\n        return invokeCallback(_state, child, callback, parent._result);\n      });\n    })();\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  resolve(promise, object);\n  return promise;\n}\n\nvar PROMISE_ID = Math.random().toString(36).substring(16);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar GET_THEN_ERROR = new ErrorObject();\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    GET_THEN_ERROR.error = error;\n    return GET_THEN_ERROR;\n  }\n}\n\nfunction tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then$$1.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then$$1) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then$$1, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$1) {\n  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$1 === GET_THEN_ERROR) {\n      reject(promise, GET_THEN_ERROR.error);\n      GET_THEN_ERROR.error = null;\n    } else if (then$$1 === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$1)) {\n      handleForeignThenable(promise, maybeThenable, then$$1);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = undefined,\n      callback = undefined,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction ErrorObject() {\n  this.error = null;\n}\n\nvar TRY_CATCH_ERROR = new ErrorObject();\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = undefined,\n      error = undefined,\n      succeeded = undefined,\n      failed = undefined;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value.error = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n      resolve(promise, value);\n    } else if (failed) {\n      reject(promise, error);\n    } else if (settled === FULFILLED) {\n      fulfill(promise, value);\n    } else if (settled === REJECTED) {\n      reject(promise, value);\n    }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      resolve(promise, value);\n    }, function rejectPromise(reason) {\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nfunction Enumerator$1(Constructor, input) {\n  this._instanceConstructor = Constructor;\n  this.promise = new Constructor(noop);\n\n  if (!this.promise[PROMISE_ID]) {\n    makePromise(this.promise);\n  }\n\n  if (isArray(input)) {\n    this.length = input.length;\n    this._remaining = input.length;\n\n    this._result = new Array(this.length);\n\n    if (this.length === 0) {\n      fulfill(this.promise, this._result);\n    } else {\n      this.length = this.length || 0;\n      this._enumerate(input);\n      if (this._remaining === 0) {\n        fulfill(this.promise, this._result);\n      }\n    }\n  } else {\n    reject(this.promise, validationError());\n  }\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n}\n\nEnumerator$1.prototype._enumerate = function (input) {\n  for (var i = 0; this._state === PENDING && i < input.length; i++) {\n    this._eachEntry(input[i], i);\n  }\n};\n\nEnumerator$1.prototype._eachEntry = function (entry, i) {\n  var c = this._instanceConstructor;\n  var resolve$$1 = c.resolve;\n\n  if (resolve$$1 === resolve$1) {\n    var _then = getThen(entry);\n\n    if (_then === then && entry._state !== PENDING) {\n      this._settledAt(entry._state, i, entry._result);\n    } else if (typeof _then !== 'function') {\n      this._remaining--;\n      this._result[i] = entry;\n    } else if (c === Promise$2) {\n      var promise = new c(noop);\n      handleMaybeThenable(promise, entry, _then);\n      this._willSettleAt(promise, i);\n    } else {\n      this._willSettleAt(new c(function (resolve$$1) {\n        return resolve$$1(entry);\n      }), i);\n    }\n  } else {\n    this._willSettleAt(resolve$$1(entry), i);\n  }\n};\n\nEnumerator$1.prototype._settledAt = function (state, i, value) {\n  var promise = this.promise;\n\n  if (promise._state === PENDING) {\n    this._remaining--;\n\n    if (state === REJECTED) {\n      reject(promise, value);\n    } else {\n      this._result[i] = value;\n    }\n  }\n\n  if (this._remaining === 0) {\n    fulfill(promise, this._result);\n  }\n};\n\nEnumerator$1.prototype._willSettleAt = function (promise, i) {\n  var enumerator = this;\n\n  subscribe(promise, undefined, function (value) {\n    return enumerator._settledAt(FULFILLED, i, value);\n  }, function (reason) {\n    return enumerator._settledAt(REJECTED, i, reason);\n  });\n};\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all$1(entries) {\n  return new Enumerator$1(this, entries).promise;\n}\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race$1(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  reject(promise, reason);\n  return promise;\n}\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {function} resolver\n  Useful for tooling.\n  @constructor\n*/\nfunction Promise$2(resolver) {\n  this[PROMISE_ID] = nextId();\n  this._result = this._state = undefined;\n  this._subscribers = [];\n\n  if (noop !== resolver) {\n    typeof resolver !== 'function' && needsResolver();\n    this instanceof Promise$2 ? initializePromise(this, resolver) : needsNew();\n  }\n}\n\nPromise$2.all = all$1;\nPromise$2.race = race$1;\nPromise$2.resolve = resolve$1;\nPromise$2.reject = reject$1;\nPromise$2._setScheduler = setScheduler;\nPromise$2._setAsap = setAsap;\nPromise$2._asap = asap;\n\nPromise$2.prototype = {\n  constructor: Promise$2,\n\n  /**\n    The primary way of interacting with a promise is through its `then` method,\n    which registers callbacks to receive either a promise's eventual value or the\n    reason why the promise cannot be fulfilled.\n  \n    ```js\n    findUser().then(function(user){\n      // user is available\n    }, function(reason){\n      // user is unavailable, and you are given the reason why\n    });\n    ```\n  \n    Chaining\n    --------\n  \n    The return value of `then` is itself a promise.  This second, 'downstream'\n    promise is resolved with the return value of the first promise's fulfillment\n    or rejection handler, or rejected if the handler throws an exception.\n  \n    ```js\n    findUser().then(function (user) {\n      return user.name;\n    }, function (reason) {\n      return 'default name';\n    }).then(function (userName) {\n      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n      // will be `'default name'`\n    });\n  \n    findUser().then(function (user) {\n      throw new Error('Found user, but still unhappy');\n    }, function (reason) {\n      throw new Error('`findUser` rejected and we're unhappy');\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n    });\n    ```\n    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n  \n    ```js\n    findUser().then(function (user) {\n      throw new PedagogicalException('Upstream error');\n    }).then(function (value) {\n      // never reached\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // The `PedgagocialException` is propagated all the way down to here\n    });\n    ```\n  \n    Assimilation\n    ------------\n  \n    Sometimes the value you want to propagate to a downstream promise can only be\n    retrieved asynchronously. This can be achieved by returning a promise in the\n    fulfillment or rejection handler. The downstream promise will then be pending\n    until the returned promise is settled. This is called *assimilation*.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // The user's comments are now available\n    });\n    ```\n  \n    If the assimliated promise rejects, then the downstream promise will also reject.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // If `findCommentsByAuthor` fulfills, we'll have the value here\n    }, function (reason) {\n      // If `findCommentsByAuthor` rejects, we'll have the reason here\n    });\n    ```\n  \n    Simple Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let result;\n  \n    try {\n      result = findResult();\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n    findResult(function(result, err){\n      if (err) {\n        // failure\n      } else {\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findResult().then(function(result){\n      // success\n    }, function(reason){\n      // failure\n    });\n    ```\n  \n    Advanced Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let author, books;\n  \n    try {\n      author = findAuthor();\n      books  = findBooksByAuthor(author);\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n  \n    function foundBooks(books) {\n  \n    }\n  \n    function failure(reason) {\n  \n    }\n  \n    findAuthor(function(author, err){\n      if (err) {\n        failure(err);\n        // failure\n      } else {\n        try {\n          findBoooksByAuthor(author, function(books, err) {\n            if (err) {\n              failure(err);\n            } else {\n              try {\n                foundBooks(books);\n              } catch(reason) {\n                failure(reason);\n              }\n            }\n          });\n        } catch(error) {\n          failure(err);\n        }\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findAuthor().\n      then(findBooksByAuthor).\n      then(function(books){\n        // found books\n    }).catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method then\n    @param {Function} onFulfilled\n    @param {Function} onRejected\n    Useful for tooling.\n    @return {Promise}\n  */\n  then: then,\n\n  /**\n    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n    as the catch block of a try/catch statement.\n  \n    ```js\n    function findAuthor(){\n      throw new Error('couldn't find that author');\n    }\n  \n    // synchronous\n    try {\n      findAuthor();\n    } catch(reason) {\n      // something went wrong\n    }\n  \n    // async with promises\n    findAuthor().catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method catch\n    @param {Function} onRejection\n    Useful for tooling.\n    @return {Promise}\n  */\n  'catch': function _catch(onRejection) {\n    return this.then(null, onRejection);\n  }\n};\n\n/*global self*/\nfunction polyfill$1() {\n    var local = undefined;\n\n    if (typeof global !== 'undefined') {\n        local = global;\n    } else if (typeof self !== 'undefined') {\n        local = self;\n    } else {\n        try {\n            local = Function('return this')();\n        } catch (e) {\n            throw new Error('polyfill failed because global object is unavailable in this environment');\n        }\n    }\n\n    var P = local.Promise;\n\n    if (P) {\n        var promiseToString = null;\n        try {\n            promiseToString = Object.prototype.toString.call(P.resolve());\n        } catch (e) {\n            // silently ignored\n        }\n\n        if (promiseToString === '[object Promise]' && !P.cast) {\n            return;\n        }\n    }\n\n    local.Promise = Promise$2;\n}\n\n// Strange compat..\nPromise$2.polyfill = polyfill$1;\nPromise$2.Promise = Promise$2;\n\nreturn Promise$2;\n\n})));\n\n//# sourceMappingURL=es6-promise.map\n","// the whatwg-fetch polyfill installs the fetch() function\n// on the global object (window or self)\n//\n// Return that as the export for use in Webpack, Browserify etc.\nrequire('whatwg-fetch');\nmodule.exports = self.fetch.bind(self);\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    rawHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = 'status' in options ? options.status : 200\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n","import MobileServerBridgeBase from '../../../shared/js/classes/MobileServerBridge';\nimport {Constants} from '../../../shared/js/Constants';\n\nexport default class MobileServerBridge extends MobileServerBridgeBase{\n\n  constructor(presentation, settings) {\n    super(presentation, settings);\n    bean.on(this.presentation, Constants.SET_CURRENT_SLIDE_INDEX, this.currentSlideIndexChanged.bind(this));\n  }\n\n  socketConnectHandler() {\n    super.socketConnectHandler();\n    this.tryToSend(Constants.MESSAGE, {\n      target: {\n        client: `mobile`,\n      },\n      content: {\n        action: Constants.SET_CURRENT_SLIDE_INDEX,\n        currentSlideIndex: this.presentation.currentSlideIndex\n      }\n    });\n  }\n\n  currentSlideIndexChanged(currentSlideIndex) {\n    this.tryToSend(Constants.MESSAGE, {\n      target: {\n        client: `mobile`,\n      },\n      content: {\n        action: Constants.SET_CURRENT_SLIDE_INDEX,\n        currentSlideIndex: currentSlideIndex\n      }\n    });\n  }\n\n}\n","const childProcess = requireNode(`child_process`);\nconst EventEmitter = requireNode(`events`).EventEmitter;\nconst path = requireNode(`path`);\n\nconst platform = requireNode(`electron`).remote.process.platform;\nconst isWin = /^win/.test(platform);\n\n//kill entire process tree\n//http://krasimirtsonev.com/blog/article/Nodejs-managing-child-processes-starting-stopping-exec-spawn\nconst kill = (pid, signal) => {\n  signal = signal || `SIGKILL`;\n  return new Promise(resolve => {\n    if(!isWin) {\n      const psTree = requireNode(`ps-tree`);\n      const killTree = true;\n      if(killTree) {\n        psTree(pid, (err, children) => {\n          [pid].concat(children.map(p => p.PID)).forEach(tpid => {\n            try { process.kill(tpid, signal); }\n            catch (ex) { console.error(ex); }\n          });\n        });\n      } else {\n        try { process.kill(pid, signal); }\n        catch (ex) { console.error(ex); }\n      }\n      resolve();\n    } else {\n      childProcess.exec(`taskkill /PID ${  pid  } /T /F`, () => {\n        resolve();\n      });\n    }\n  });\n};\n\nexport default class NodeAppRunner extends EventEmitter {\n  constructor() {\n    super();\n  }\n  run(applicationPath) {\n    return this.stop()\n    .then(() => {\n      this.cwd = path.dirname(applicationPath);\n      this.numDataEventsReceived = 0;\n      this.ignoreFirstEventsAmount = 0;\n      if(isWin) {\n        this.ignoreFirstEventsAmount = 2;\n        this.runner = childProcess.spawn(`cmd`, [`nvmw`, `use`, `iojs-v2.3.1`], {cwd: this.cwd});\n        setTimeout(() => {\n          this.runner.stdin.write(`node ${  applicationPath  }\\n`);\n        }, 500);\n      } else {\n        console.log(`node ${  applicationPath}`);\n        this.runner = childProcess.spawn(`node`, [applicationPath], {cwd: this.cwd});\n      }\n      this.runner.stdout.on(`data`, data => this.onRunnerData(data));\n      this.runner.stderr.on(`data`, error => this.onRunnerError(error));\n      this.runner.on(`disconnect`, () => this.onDisconnect());\n      this.runner.on(`close`, () => this.onClose());\n      this.runner.on(`exit`, () => this.onExit());\n    });\n  }\n  onRunnerData(data) {\n    this.numDataEventsReceived++;\n    if(this.numDataEventsReceived <= this.ignoreFirstEventsAmount) {\n      //ignore the first x-messages\n      return;\n    }\n    data = data.toString().trim();\n    if(data.indexOf(this.cwd) === 0) {\n      data = data.substr(this.cwd.length);\n      if(data.length === 1) {\n        return;\n      }\n    }\n    this.emit(`stdout-data`, data);\n  }\n\n  onRunnerError(error) {\n    this.emit(`stderr-data`, error.toString().trim());\n  }\n\n  onDisconnect() {\n    console.log(`[ChildApp] runner disconnected`);\n    this.runner = false;\n  }\n\n  onClose() {\n    console.log(`[ChildApp] runner closed`);\n    this.runner = false;\n  }\n\n  onExit() {\n    console.log(`[ChildApp] runner exited`);\n    this.runner = false;\n  }\n\n  stop() {\n    return new Promise(resolve => {\n      if(!this.runner) {\n        resolve();\n      }\n      this.runner.stdout.removeAllListeners();\n      this.runner.stderr.removeAllListeners();\n      this.runner.stdin.end();\n      //listen for runner events and resolve on the one that occurs\n      // const cbCalled = false;\n      // this.runner.on('disconnect', () => {\n      //   console.log('disconnect');\n      //   if(!cbCalled) {\n      //     resolve();\n      //   }\n      // });\n      // this.runner.on('close', () => {\n      //   console.log('close');\n      //   if(!cbCalled) {\n      //     resolve();\n      //   }\n      // });\n      // this.runner.on('exit', () => {\n      //   console.log('exit');\n      //   if(!cbCalled) {\n      //     resolve();\n      //   }\n      // });\n      kill(this.runner.pid).then(() => {\n        resolve();\n      });\n      this.runner = false;\n    });\n  }\n  destroy() {\n    return this.stop()\n    .then(() => {\n    });\n  }\n}\n","import {Constants} from '../../../shared/js/Constants';\nimport PresentationBase from '../../../shared/js/classes/Presentation';\nimport SlideBridge from './SlideBridge';\nimport MobileServerBridge from './MobileServerBridge';\n\nconst path = requireNode(`path`);\n\nconst KEYCODE_LEFT = 37;\nconst KEYCODE_RIGHT = 39;\nconst KEYCODE_SPACE = 32;\n\nexport default class Presentation extends PresentationBase {\n  constructor(data, role, settings) {\n    super(data, role, settings);\n\n    window.onbeforeunload = event => this.closeHandler(event);\n    $(window).on(`keydown`, event => this.keydownHandler(event));\n    bean.on(this, Constants.SET_CURRENT_SLIDE_INDEX, this.currentSlideIndexChangedHandler.bind(this));\n\n    $(`body`).on(Constants.GO_TO_PREVIOUS_SLIDE, this.goToPreviousSlide.bind(this));\n    $(`body`).on(Constants.GO_TO_NEXT_SLIDE, this.goToNextSlide.bind(this));\n    $(`body`).on(Constants.OPEN_COMMAND_LINE, this.openCommandLine.bind(this));\n    $(`body`).on(Constants.OPEN_CAMERA, this.openCamera.bind(this));\n  }\n\n  closeHandler(event) { // eslint-disable-line no-unused-vars\n  }\n\n  currentSlideIndexChangedHandler(slideIndex) { // eslint-disable-line no-unused-vars\n  }\n\n  createMobileServerBridge() {\n    return new MobileServerBridge(this, this.settings);\n  }\n\n  toggleElevatorMusic() {\n    this.elevatorMusicPlaying = !this.elevatorMusicPlaying;\n    if(this.elevatorMusicPlaying) {\n      this.elevatorMusic.play();\n    } else {\n      this.elevatorMusic.pause();\n    }\n  }\n\n  //prepend urls with file:/// (faster?)\n  processSlideSrc(src) {\n    src = `file:///${  path.resolve(this.settings.presentationPath, src)}`;\n    src = src.replace(/\\\\/g, `/`);\n    return src;\n  }\n\n  createSlideBridges(data) {\n    PresentationBase.prototype.createSlideBridges.call(this, data);\n    const that = this;\n    const $slideMenu = $(`#slideMenu`);\n    const numSlideBridges = this.slideBridges.length;\n    for(let i = 0; i < numSlideBridges; i++) {\n      const slideBridge = this.slideBridges[i];\n      $slideMenu.append(`<button type=\"button\" data-slidenr=\"${  i  }\" class=\"dropdown-item\">${  i + 1  } ${  slideBridge.name  }</button>`);\n    }\n    $slideMenu.find(`button`).on(`click`, function(event){\n      event.preventDefault();\n      that.setCurrentSlideIndex(parseInt($(this).data(`slidenr`)));\n    });\n  }\n\n  createSlideBridge(slide) {\n    //use our own bridge which doesn't use fetch\n    return new SlideBridge(slide);\n  }\n\n  slideMessageHandler(event) {\n    PresentationBase.prototype.slideMessageHandler.call(this, event);\n    if(!event.data) {\n      return;\n    }\n    switch(event.data.action) {\n    case Constants.GO_TO_PREVIOUS_SLIDE:\n      this.goToPreviousSlide();\n      break;\n    case Constants.GO_TO_NEXT_SLIDE:\n      this.goToNextSlide();\n      break;\n    case Constants.OPEN_COMMAND_LINE:\n      this.openCommandLine();\n      break;\n    case Constants.OPEN_CAMERA:\n      this.openCamera();\n      break;\n    }\n  }\n\n  keydownHandler(event) {\n    //one frame delay\n    window.requestAnimationFrame(() => {\n      if(event.isImmediatePropagationStopped()) {\n        return;\n      }\n      switch(event.keyCode) {\n      case KEYCODE_LEFT:\n        this.goToPreviousSlide();\n        break;\n      case KEYCODE_RIGHT:\n        this.goToNextSlide();\n        break;\n      case KEYCODE_SPACE:\n        $(`#presentation-controls`).toggle();\n        break;\n      }\n    });\n  }\n\n  childAppDataHandler(data) {\n    const currentSlideBridge = this.getSlideBridgeByIndex(this.currentSlideIndex);\n    if(currentSlideBridge) {\n      currentSlideBridge.tryToPostMessage({\n        action: Constants.CHILD_APP_STDOUT_DATA,\n        data: data\n      });\n    }\n  }\n\n  childAppErrorHandler(data) {\n    const currentSlideBridge = this.getSlideBridgeByIndex(this.currentSlideIndex);\n    if(currentSlideBridge) {\n      currentSlideBridge.tryToPostMessage({\n        action: Constants.CHILD_APP_STDERR_DATA,\n        data: data\n      });\n    }\n  }\n\n  openCommandLine() {\n    $(`#consoleModal`).modal(`show`);\n  }\n\n  openCamera() {\n    $(`#webcamModal`).modal(`show`);\n  }\n\n  handleMobileServerMessage(message) {\n    if(message.content) {\n      if(message.content.action === `goToNextSlide`) {\n        this.goToNextSlide();\n      } else if(message.content.action === `goToPreviousSlide`) {\n        this.goToPreviousSlide();\n      }\n    }\n  }\n}\n","import SlideBridgeBase from '../../../shared/js/classes/SlideBridge';\n\nexport default class SlideBridge extends SlideBridgeBase {\n\n  attachToSlideHolder(slideHolder, src, cb) {\n    // console.log('attachToSlideHolder', src);\n    // console.log(slideHolder);\n    this.slideHolder = slideHolder;\n    //notify the content it is being cleared\n    this.tryToPostMessage({action: `destroy`});\n    //clear the current content\n    this.slideHolder.innerHTML = ``;\n    $(slideHolder).attr(`data-name`, this.name);\n    $(slideHolder).addClass(`loading`);\n\n    $(slideHolder).off(`load`);\n    $(slideHolder).on(`load`, () => {\n      this.tryToPostMessage({\n        action: `setState`,\n        state: this.state\n      });\n      $(slideHolder).off(`load`);\n    });\n\n    if (src !== $(slideHolder).attr(`data-src`)) {\n      //create html import\n      const $importEl = $(`<link rel=\"import\">`);\n      const importEl = $importEl[0];\n      $importEl.on(`load`, () => {\n        const template = importEl.import.querySelector(`template`);\n        if(template) {\n          const clone = document.importNode(template.content, true);\n          this.slideHolder.appendChild(clone);\n        }\n        $importEl.remove();\n        $(slideHolder).removeClass(`loading`);\n        cb();\n      });\n      $importEl.attr(`href`, src);\n      $(slideHolder).attr(`data-src`, src);\n      $(slideHolder).html($importEl);\n    }\n  }\n}\n","const fs = requireNode(`fs-promise`);\n\nexport default class CodeElement {\n  constructor(el, options) {\n    this.el = el;\n    this.$el = $(el);\n    //options\n    if(!options)\n    {\n      options = {};\n    }\n\n    const width = $(el).parent()[0].style.width || `100%`;\n    const height = $(el).parent()[0].style.height || `100%`;\n\n    //wrap element in a container\n    this.$wrapperEl = $(el).wrap(`<div class=\"live-code-element live-code-code-element\"></div>`).parent();\n    this.wrapperEl = this.$wrapperEl[0];\n\n    this.id = this.$el.attr(`data-id`);\n    this.file = this.$el.data(`file`);\n\n    if(!this.id && this.file)\n    {\n      this.id = this.file;\n    }\n    if(!this.id)\n    {\n      this.id = `code-${  Math.round(Math.random() * 1000 * new Date().getTime())}`;\n    }\n    this.$el.attr(`data-id`, this.id);\n\n    this.runtime = this.$el.data(`runtime`);\n    if(!this.runtime)\n    {\n      this.runtime = `browser`;\n    }\n\n    this.console = this.$el.data(`console`);\n    this.processor = this.$el.data(`processor`);\n\n    //language is programming language - used for injecting in html\n    this.language = this.$el.data(`language`);\n    if(!this.language)\n    {\n      //default to javascript\n      this.language = `javascript`;\n    }\n\n    //mode is mode for codemirror\n    this.mode = this.$el.data(`mode`);\n    if(!this.mode)\n    {\n      //default to the language\n      this.mode = this.language;\n    }\n\n    this.codeMirror = CodeMirror.fromTextArea(this.el, {\n      lineNumbers: true,\n      mode: this.mode,\n      extraKeys: {\"Ctrl-Space\": `autocomplete`}\n    });\n\n    this.codeMirror.setSize(width, height);\n\n    //this.$el.css('width', '100%').css('height', '100%');\n    this.layout();\n  }\n\n  pause() {\n    //no real reason to do pause / resume\n  }\n\n  resume() {\n    //no real reason to do pause / resume\n  }\n\n  destroy() {\n    this.pause();\n  }\n\n  getValue() {\n    return this.codeMirror.getValue();\n  }\n\n  setValue(value) {\n    this.codeMirror.setValue(value);\n  }\n\n  saveToFile(filePath) {\n    return fs.writeFile(filePath, this.getValue());\n  }\n\n  readFromFile(filePath) {\n    return fs.readFile(filePath, `utf8`)\n      .then(data => {\n        this.setValue(data);\n        return data;\n      });\n  }\n\n  layout() {\n    // this.$wrapperEl.find('.CodeMirror-scroll').css('max-height', this.$wrapperEl.css('height'));\n    this.codeMirror.refresh();\n  }\n}\n","import NodeAppRunner from '../NodeAppRunner';\n\nconst htmlEscape = str => {\n  return String(str).replace(/&/g, `&amp;`)\n    .replace(/\\\"/g, `&quot;`)\n    .replace(/'/g, `&#39;`)\n    .replace(/</g, `&lt;`)\n    .replace(/>/g, `&gt;`);\n};\n\nconst needsJSONConversion = arg => {\n  if(\n    typeof arg === `number` ||\n    typeof arg === `string` ||\n    typeof arg === `boolean`\n  ) {\n    return false;\n  }\n  return true;\n};\n\nexport default class ConsoleElement {\n\n  constructor(el, options) {\n    this.el = el;\n    this.$el = $(el);\n\n    this.nodeAppRunner = new NodeAppRunner();\n    this.nodeAppRunner.on(`stdout-data`, data => this.info([data]));\n    this.nodeAppRunner.on(`stderr-data`, error => this.error([error]));\n\n    //options\n    if(!options) {\n      options = {};\n    }\n    //wrap element in a container\n    this.$wrapperEl = $(el).wrap(`<div class=\"live-code-element live-code-console-element unreset\"></div>`).parent();\n    this.wrapperEl = this.$wrapperEl[0];\n\n    this.id = this.$el.attr(`data-id`);\n    if(!this.id)\n    {\n      //generate id\n      this.id = `code-${  Math.round(Math.random() * 1000 * new Date().getTime())}`;\n      this.$el.attr(`data-id`, this.id);\n    }\n\n    this.file = this.$el.data(`file`);\n\n    this.$el.css(`width`, `100%`).css(`height`, `100%`);\n\n    this.logs = [];\n\n    this.isRunning = false;\n  }\n\n  pause() {\n    if(!this.isRunning) {\n      return;\n    }\n    this.isRunning = false;\n    this.nodeAppRunner.stop();\n  }\n\n  resume() {\n    if(this.isRunning) {\n      return;\n    }\n    if(!this.applicationPath) {\n      return;\n    }\n    this.nodeAppRunner.run(this.applicationPath);\n    this.isRunning = true;\n  }\n\n  destroy() {\n    this.pause();\n  }\n\n  runNodeApp(applicationPath) {\n    this.pause();\n    this.applicationPath = applicationPath;\n    this.resume();\n  }\n\n  info(args) {\n    let str = ``;\n    args.forEach(function(arg){\n      if(str.length > 0) {\n        str += ` `;\n      }\n      //is it an object or a simple type?\n      if(needsJSONConversion(arg)) {\n        arg = JSON.stringify(arg);\n      }\n      str += htmlEscape(arg);\n    });\n    this.logs.push(`<pre>${  str  }</pre>`);\n    while(this.logs.length > 20) {\n      this.logs.shift();\n    }\n    const html = this.logs.join(``);\n    this.el.innerHTML = html;\n    this.wrapperEl.scrollTop = this.wrapperEl.scrollHeight;\n  }\n\n  error(args) {\n    let str = ``;\n    args.forEach(function(arg){\n      if(str.length > 0) {\n        str += ` `;\n      }\n      //is it an object or a simple type?\n      if(needsJSONConversion(arg)) {\n        arg = JSON.stringify(arg);\n      }\n      str += htmlEscape(arg);\n    });\n    this.logs.push(`<pre class=\"console-error\">${  str  }</pre>`);\n    while(this.logs.length > 20) {\n      this.logs.shift();\n    }\n    const html = this.logs.join(``);\n    this.el.innerHTML = html;\n    this.wrapperEl.scrollTop = this.wrapperEl.scrollHeight;\n  }\n}\n","const TERMINAL_URL = `http://localhost:3000`;\n\nexport default class TerminalElement {\n\n  constructor(el, options) {\n    this.el = el;\n    this.$el = $(el);\n\n    this._ipcMessageHandler = e => this.ipcMessageHandler(e);\n\n    //options\n    if(!options) {\n      options = {};\n    }\n    //wrap element in a container\n    this.$wrapperEl = $(el).wrap(`<div class=\"live-code-element live-code-terminal-element\"></div>`).parent();\n    this.wrapperEl = this.$wrapperEl[0];\n\n    this.id = this.$el.attr(`data-id`);\n    if(!this.id)\n    {\n      //generate id\n      this.id = `code-${  Math.round(Math.random() * 1000 * new Date().getTime())}`;\n      this.$el.attr(`data-id`, this.id);\n    }\n\n    this.dir = this.$el.data(`dir`);\n    this.autorun = this.$el.data(`autorun`);\n\n    this.$el.css(`width`, `100%`).css(`height`, `100%`);\n\n    this.isRunning = false;\n  }\n\n  pause() {\n    this.isRunning = false;\n    if(this.webview) {\n      this.webview.parentNode.removeChild(this.webview);\n      this.webview = false;\n    }\n  }\n\n  resume() {\n    if(this.isRunning) {\n      return;\n    }\n    this.isRunning = true;\n    //create a webview tag\n    if(this.webview) {\n      this.webview.removeEventListener(`ipc-message`, this._ipcMessageHandler);\n      this.webview.parentNode.removeChild(this.webview);\n      this.webview = false;\n    }\n    this.webview = document.createElement(`webview`);\n    // this.webview.addEventListener('dom-ready', () => {\n    //   this.webview.openDevTools();\n    // });\n    this.webview.addEventListener(`ipc-message`, this._ipcMessageHandler);\n    this.webview.style.width = `100%`;\n    this.webview.style.height = `100%`;\n    this.webview.setAttribute(`nodeintegration`, ``);\n    this.webview.setAttribute(`src`, TERMINAL_URL);\n    this.el.appendChild(this.webview);\n  }\n\n  ipcMessageHandler(e) {\n    if(e.channel !== `message-from-terminal`) {\n      return;\n    }\n    if(e.args.length < 1) {\n      return;\n    }\n    const o = e.args[0];\n    if(!o.command) {\n      return;\n    }\n    switch(o.command) {\n    case `init`:\n      if(this.dir) {\n        this.executeCommand(`cd ${this.dir}`);\n        this.executeCommand(`clear`);\n      }\n      if(this.autorun) {\n        this.executeCommand(this.autorun);\n      }\n      break;\n    default:\n      console.warn(`unknow command object from terminal`);\n      console.warn(o);\n      break;\n    }\n  }\n\n  executeCommand(commandString) {\n    this.webview.send(`message-to-terminal`, {\n      command: `execute`,\n      value: commandString\n    });\n  }\n\n  destroy() {\n    this.pause();\n  }\n}\n","export default class WebPreviewElement {\n\n  constructor(el, options) {\n    this.el = el;\n    this.$el = $(el);\n    //options\n    if(!options) {\n      options = {};\n    }\n\t\t//wrap element in a container\n    this.$wrapperEl = $(el).wrap(`<div class=\"live-code-element live-code-web-preview-element\"></div>`).parent();\n    this.wrapperEl = this.$wrapperEl[0];\n\n    this.id = this.$el.attr(`data-id`);\n    if(!this.id)\n\t\t{\n\t\t\t//generate id\n      this.id = `code-${  Math.round(Math.random() * 1000 * new Date().getTime())}`;\n      this.$el.attr(`data-id`, this.id);\n    }\n\n    this.file = this.$el.data(`file`) || this.$el.data(`url`);\n    this.autoload = this.$el.data(`autoload`);\n\n    this.console = this.$el.data(`console`);\n\n    this.$el.css(`width`, `100%`).css(`height`, `100%`);\n\n    this.url = false;\n    this.blocks = false;\n    this.isRunning = false;\n\t\t//webview gets created by calling updateUrl or updateCode\n  }\n\n  get needsOutputPathPrefix() {\n    return !(this.$el.data(`url`));\n  }\n\n  destroy() {\n    this.pause();\n  }\n\n  pause() {\n    this.isRunning = false;\n    if(this.webview) {\n      this.webview.removeEventListener(`did-get-response-details`, this._didGetResponseDetailsHandler);\n      this.webview.removeEventListener(`did-fail-load`, this._didFailLoadHandler);\n      this.webview.removeEventListener(`ipc-message`, this._ipcMessageHandler);\n      this.webview.parentNode.removeChild(this.webview);\n      this.webview = false;\n      clearTimeout(this.retryTimeout);\n    }\n  }\n\n  resume() {\n    if(this.isRunning) {\n      return;\n    }\n    if(this.url === false && this.blocks === false) {\n      return;\n    }\n    this.isRunning = true;\n    this._createWebview();\n  }\n\n  _createWebview() {\n    //create a webview tag\n    if(this.webview) {\n      this.webview.parentNode.removeChild(this.webview);\n      this.webview = false;\n    }\n    this.webview = document.createElement(`webview`);\n    this.webview.style.width = `100%`;\n    this.webview.style.height = `100%`;\n    this.webview.preload = `js/webpreview.js`;\n    this.el.appendChild(this.webview);\n\n    const url = (this.url !== false) ? this.url : `webpreview.html`;\n    let htmlSrc = ``;\n    if(this.blocks !== false) {\n      for(let i = 0; i < this.blocks.length; i++)\n\t\t\t{\n        htmlSrc += this.blocks[i].code;\n      }\n    }\n\n\t\t//add listeners\n    this._didGetResponseDetailsHandler = e => {\n      if(e.originalURL !== this.webview.src) {\n        return;\n      }\n      if(this.$el.attr(`data-open-devtools`)) {\n        this.webview.openDevTools();\n      }\n    };\n    this.webview.addEventListener(`did-get-response-details`, this._didGetResponseDetailsHandler);\n\n    this._didFailLoadHandler = () => {\n      this.retryTimeout = setTimeout(() => {\n        this.pause();\n        this.resume();\n      }, 1000);\n    };\n    this.webview.addEventListener(`did-fail-load`, this._didFailLoadHandler);\n\n    this._ipcMessageHandler = event => {\n      if(event.channel === `request-html`)\n      {\n        this.webview.send(`receive-html`, htmlSrc);\n      }\n      else if(event.channel === `console.log`)\n      {\n        //notify live code editor\n        this.$wrapperEl.trigger(`console.log`, event.args[0]);\n      }\n      else if(event.channel === `console.error`)\n      {\n        //notify live code editor\n        this.$wrapperEl.trigger(`console.error`, event.args[0]);\n      }\n    };\n    this.webview.addEventListener(`ipc-message`, this._ipcMessageHandler);\n\n    if(!this.$el.attr(`data-disable-nodeintegration`)) {\n      this.webview.setAttribute(`nodeintegration`, ``);\n    }\n    this.webview.setAttribute(`src`, url);\n  }\n\n  updateUrl(url) {\n    this.pause();\n    this.url = url;\n    this.blocks = false;\n    this.resume();\n  }\n\n  updateCode(blocks) {\n    this.pause();\n    this.url = false;\n    this.blocks = blocks;\n    this.resume();\n  }\n}\n","export default class WebcamElement {\n\n  constructor(el, options) {\n    this.el = el;\n    this.$el = $(el);\n\n    //options\n    if(!options) {\n      options = {};\n    }\n\n    this.id = this.$el.attr(`data-id`);\n    if(!this.id)\n    {\n      //generate id\n      this.id = `webcam-${  Math.round(Math.random() * 1000 * new Date().getTime())}`;\n      this.$el.attr(`data-id`, this.id);\n    }\n\n    this.source = this.$el.attr(`data-source`);\n    if(this.source) {\n      this.sourceEl = document.querySelector(this.source);\n    }\n\n    this.ctx = this.el.getContext(`2d`);\n\n    this.isRunning = false;\n  }\n\n  destroy() {\n    this.pause();\n  }\n\n  pause() {\n    this.isRunning = false;\n    window.cancelAnimationFrame(this.animationFrameId);\n  }\n\n  resume() {\n    if(this.isRunning) {\n      return;\n    }\n    this.isRunning = true;\n    this.animationFrameId = window.requestAnimationFrame(() => this.drawLoop());\n  }\n\n  drawLoop() {\n    if(this.isRunning) {\n      window.requestAnimationFrame(() => this.drawLoop());\n    }\n    if(!this.sourceEl) {\n      return;\n    }\n    this.el.width = this.sourceEl.width;\n    this.el.height = this.sourceEl.height;\n    this.ctx.clearRect(0, 0, this.el.width, this.el.height);\n    this.ctx.drawImage(this.sourceEl, 0, 0);\n  }\n}\n","import ConsoleElement from './ConsoleElement';\nimport TerminalElement from './TerminalElement';\nimport CodeElement from './CodeElement';\nimport WebPreviewElement from './WebPreviewElement';\nimport WebcamElement from './WebcamElement';\n\nconst path = requireNode(`path`);\nconst fs = requireNode(`fs-promise`);\n\nexport default class LiveCode {\n\n  constructor($el, config, readyCallback) {\n    this.$el = $el;\n    this.el = this.$el[0];\n\n    if(this.$el.attr(`data-entry-path`)) {\n      this.entryPath = path.join(config.presentationPath, this.$el.attr(`data-entry-path`));\n    }\n    if(this.$el.attr(`data-output-path`)) {\n      this.outputPath = path.join(config.presentationPath, this.$el.attr(`data-output-path`));\n    } else {\n      if(this.entryPath) {\n        this.outputPath = this.entryPath;\n      }\n    }\n\n    const p = Promise.resolve();\n    p.then(() => {\n      if(this.entryPath && this.entryPath !== this.outputPath) {\n        return fs.copy(this.entryPath, this.outputPath);\n      }\n    })\n    .then(() => {\n      //create the consoles\n      this.consoleElements = {};\n      this.$el.find(`[data-type=\"console\"]`).each(((index, consoleEl) => this.createConsoleElement(consoleEl)));\n\n      //create the terminals\n      this.terminalElements = {};\n      this.$el.find(`[data-type=\"terminal\"]`).each(((index, terminalEl) => this.createTerminalElement(terminalEl)));\n\n      //create the previews\n      this.webPreviewElements = {};\n      this.$el.find(`[data-type=\"web-preview\"]`).each(((index, webPreviewEl) => this.createWebPreviewElement(webPreviewEl)));\n\n      //create the code editors\n      this.codeElements = {};\n      this.$el.find(`[data-type=\"code\"]`).each(((index, codeEl) => this.createCodeElement(codeEl)));\n\n      //create the webcam elements\n      this.webcamElements = {};\n      this.$el.find(`[data-type=\"webcam\"]`).each(((index, webcamEl) => this.createWebcamElement(webcamEl)));\n\n      //create run buttons\n      this.runButtonEls = [];\n      this.$el.find(`[data-type=\"run-button\"]`).each(((index, runButtonEl) => this.createRunButton(runButtonEl)));\n\n      //create save buttons\n      this.saveButtonEls = [];\n      this.$el.find(`[data-type=\"save-button\"]`).each(((index, saveButtonEl) => this.createSaveButton(saveButtonEl)));\n\n      //create reload buttons\n      this.reloadButtonEls = [];\n      this.$el.find(`[data-type=\"reload-button\"]`).each(((index, reloadButtonEl) => this.createReloadButton(reloadButtonEl)));\n\n    })\n    .then(() => this.setCodeElementValuesFromFiles())\n    .then(() => {\n      this.loaded = true;\n      if(this.isRunning) {\n        this.isRunning = false;\n        this.resume();\n      }\n    })\n    .then(readyCallback).catch(err => console.log(err));\n\n    //disable keyboard bubbling up\n    $(window).on(`keydown`, event => this.keyDownHandler(event));\n  }\n\n  keyDownHandler(e) {\n    if(this.el.contains(document.activeElement)) {\n      e.stopImmediatePropagation();\n    }\n  }\n\n  /**\n   * return a previously created code element, based on the input\n   * input can be:\n   *  - html dom element\n   *  - id of code element\n   *\n   * returns the code element if found, otherwise returns false\n   */\n  getCodeElement(input) {\n    return this.getElement(this.codeElements, input);\n  }\n\n  /**\n   * return a previously created web preview element, based on the input\n   * input can be:\n   *  - html dom element\n   *  - id of code element\n   *\n   * returns the web preview element if found, otherwise returns false\n   */\n  getWebPreviewElement(input) {\n    return this.getElement(this.webPreviewElements, input);\n  }\n\n  getElement(elementsCollection, input) {\n    let propertyToCheck = `id`;\n    if(input.nodeName) {\n      propertyToCheck = `el`;\n    }\n    for(const key in elementsCollection)\n    {\n      if(elementsCollection[key][propertyToCheck] === input) {\n        return elementsCollection[key];\n      }\n    }\n    return false;\n  }\n\n  setCodeElementValueFromFile(codeElement, filePath) {\n    return codeElement.readFromFile(filePath);\n  }\n\n  saveCodeElementToFile(codeElement, filePath) {\n    return codeElement.saveToFile(filePath);\n  }\n\n  getFilePath(file) {\n    if(!file) {\n      return false;\n    }\n    if(this.outputPath) {\n      return path.join(this.outputPath, file);\n    }\n    return file;\n  }\n\n  getFilePathForCodeElement(codeElement) {\n    if(!codeElement.file) {\n      return false;\n    }\n    return this.getFilePath(codeElement.file);\n  }\n\n  setCodeElementValuesFromFiles() {\n    const tasks = [];\n    let key;\n    let codeElement;\n    let filePath;\n    for(key in this.codeElements)\n    {\n      codeElement = this.codeElements[key];\n      filePath = this.getFilePathForCodeElement(codeElement);\n      if(filePath)\n      {\n        tasks.push(this.setCodeElementValueFromFile(codeElement, filePath));\n      }\n    }\n    return Promise.all(tasks);\n  }\n\n  autoStartWebpreviewElementsWhenNeeded() {\n    for(const key in this.webPreviewElements)\n    {\n      const webPreviewElement = this.webPreviewElements[key];\n      if(webPreviewElement.autoload) {\n        this.reloadWebPreviewElement(webPreviewElement);\n      }\n    }\n  }\n\n  saveCodeElementsToFiles() {\n    const tasks = [];\n    let key;\n    let codeElement;\n    let filePath;\n    for(key in this.codeElements)\n    {\n      codeElement = this.codeElements[key];\n      filePath = this.getFilePathForCodeElement(codeElement);\n      if(filePath)\n      {\n        tasks.push(this.saveCodeElementToFile(codeElement, filePath));\n      }\n    }\n    return Promise.all(tasks);\n  }\n\n  destroy() {\n    let key;\n    for(key in this.consoleElements)\n    {\n      this.destroyConsoleElement(this.consoleElements[key]);\n    }\n    for(key in this.terminalElements)\n    {\n      this.destroyTerminalElement(this.terminalElements[key]);\n    }\n    for(key in this.webPreviewElements)\n    {\n      this.destroyWebPreviewElement(this.webPreviewElements[key]);\n    }\n    for(key in this.codeElements)\n    {\n      this.destroyCodeElement(this.codeElements[key]);\n    }\n    for(key in this.webcamElements)\n    {\n      this.destroyWebcamElement(this.webcamElements[key]);\n    }\n    this.runButtonEls.forEach(el => this.destroyRunButton(el));\n    this.saveButtonEls.forEach(el => this.destroySaveButton(el));\n    this.reloadButtonEls.forEach(el => this.destroyReloadButton(el));\n    //TODO: destroy the tmp directory for this instance\n  }\n\n  pause() {\n    this.isRunning = false;\n    if(!this.loaded) {\n      return;\n    }\n    let key;\n    for(key in this.consoleElements)\n    {\n      this.consoleElements[key].pause();\n    }\n    for(key in this.terminalElements)\n    {\n      this.terminalElements[key].pause();\n    }\n    for(key in this.webPreviewElements)\n    {\n      this.webPreviewElements[key].pause();\n    }\n    for(key in this.codeElements)\n    {\n      this.codeElements[key].pause();\n    }\n    for(key in this.webcamElements)\n    {\n      this.webcamElements[key].pause();\n    }\n  }\n\n  resume() {\n    this.isRunning = true;\n    if(!this.loaded) {\n      return;\n    }\n    let key;\n    for(key in this.consoleElements)\n    {\n      this.consoleElements[key].resume();\n    }\n    for(key in this.terminalElements)\n    {\n      this.terminalElements[key].resume();\n    }\n    for(key in this.webPreviewElements)\n    {\n      this.webPreviewElements[key].resume();\n    }\n    for(key in this.codeElements)\n    {\n      this.codeElements[key].resume();\n    }\n    for(key in this.webcamElements)\n    {\n      this.webcamElements[key].resume();\n    }\n    this.autoStartWebpreviewElementsWhenNeeded();\n  }\n\n  layout() {\n    //might be triggered after split pane resize or tab switch\n    //codemirror instances need to be updated\n    for(const key in this.codeElements)\n    {\n      this.codeElements[key].layout();\n    }\n  }\n\n  createConsoleElement(consoleEl) {\n    const consoleElement = new ConsoleElement(consoleEl);\n    this.consoleElements[consoleElement.id] = consoleElement;\n  }\n\n  destroyConsoleElement(consoleElement) {\n    consoleElement.destroy();\n  }\n\n  createTerminalElement(terminalEl) {\n    const terminalElement = new TerminalElement(terminalEl);\n    this.terminalElements[terminalElement.id] = terminalElement;\n  }\n\n  destroyTerminalElement(terminalElement) {\n    terminalElement.destroy();\n  }\n\n  createWebPreviewElement(webPreviewEl) {\n    const webPreviewElement = new WebPreviewElement(webPreviewEl);\n    webPreviewElement.$wrapperEl.on(`console.log`, this.webPreviewConsoleLogHandler.bind(this, webPreviewElement));\n    webPreviewElement.$wrapperEl.on(`console.error`, this.webPreviewConsoleErrorHandler.bind(this, webPreviewElement));\n    this.webPreviewElements[webPreviewElement.id] = webPreviewElement;\n  }\n\n  destroyWebPreviewElement(webPreviewElement) {\n    webPreviewElement.$wrapperEl.off(`console.log`);\n    webPreviewElement.$wrapperEl.off(`console.error`);\n    webPreviewElement.destroy();\n  }\n\n  createCodeElement(codeEl) {\n    const codeElement = new CodeElement(codeEl);\n    this.codeElements[codeElement.id] = codeElement;\n  }\n\n  destroyCodeElement(codeElement) {\n    codeElement.destroy();\n  }\n\n  createWebcamElement(webcamEl) {\n    const webcamElement = new WebcamElement(webcamEl);\n    this.webcamElements[webcamElement.id] = webcamElement;\n  }\n\n  destroyWebcamElement(webcamElement) {\n    webcamElement.destroy();\n  }\n\n  createRunButton(runButtonEl) {\n    this.runButtonEls.push(runButtonEl);\n    $(runButtonEl).on(`click`, (() => {\n      if(this.webPreviewElements[$(runButtonEl).data(`target`)]) {\n        //save the files first\n        this.saveCodeElementsToFiles()\n          .catch(err => console.log(err))\n          .then(() => {\n            //update the web preview\n            this.updateWebPreviewElement(this.webPreviewElements[$(runButtonEl).data(`target`)]);\n          });\n      } else if(this.consoleElements[$(runButtonEl).data(`target`)]) {\n        const applicationPath = this.getFilePath(this.consoleElements[$(runButtonEl).data(`target`)].file);\n        this.consoleElements[$(runButtonEl).data(`target`)].runNodeApp(applicationPath);\n      }\n    }));\n  }\n\n  destroyRunButton(runButtonEl) {\n    $(runButtonEl).off(`click`);\n  }\n\n  createSaveButton(saveButtonEl) {\n    this.saveButtonEls.push(saveButtonEl);\n    $(saveButtonEl).on(`click`, () => {\n      //get the target element for this button\n      const targetString = $(saveButtonEl).data(`target`);\n      if(targetString === `all`) {\n        return this.saveCodeElementsToFiles();\n      }\n      const codeElement = this.getCodeElement(targetString);\n      if(!codeElement) {\n        return;\n      }\n      const filePath = this.getFilePathForCodeElement(codeElement);\n      if(!filePath) {\n        return;\n      }\n      codeElement.saveToFile(filePath).catch(function(err) { console.log(err); });\n    });\n  }\n\n  destroySaveButton(saveButtonEl) {\n    $(saveButtonEl).off(`click`);\n  }\n\n  createReloadButton(reloadButtonEl) {\n    this.reloadButtonEls.push(reloadButtonEl);\n    $(reloadButtonEl).on(`click`, () => {\n      //get the reload button target\n      let reloadTargetElement = this.getCodeElement($(reloadButtonEl).data(`target`));\n      if(reloadTargetElement) {\n        this.reloadCodeElement(reloadTargetElement);\n        return;\n      }\n      reloadTargetElement = this.getWebPreviewElement($(reloadButtonEl).data(`target`));\n      if(reloadTargetElement) {\n        this.reloadWebPreviewElement(reloadTargetElement);\n        return;\n      }\n    });\n  }\n\n  reloadCodeElement(codeElement) {\n    const filePath = self.getFilePathForCodeElement(codeElement);\n    if(!filePath) {\n      return;\n    }\n    codeElement.readFromFile(filePath).catch(err => console.log(err));\n  }\n\n  reloadWebPreviewElement(webPreviewElement) {\n    this.updateWebPreviewElement(webPreviewElement);\n  }\n\n  destroyReloadButton(reloadButtonEl) {\n    $(reloadButtonEl).off(`click`);\n  }\n\n  webPreviewConsoleLogHandler(webPreviewElement, event, message) {\n    //get the console element for this web preview\n    const consoleElement = this.getConsoleElementForWebPreview(webPreviewElement);\n    if(consoleElement)\n    {\n      consoleElement.info(JSON.parse(message).args);\n    }\n  }\n\n  webPreviewConsoleErrorHandler(webPreviewElement, event, message) {\n    //get the console element for this web preview\n    const consoleElement = this.getConsoleElementForWebPreview(webPreviewElement);\n    if(consoleElement)\n    {\n      consoleElement.error(JSON.parse(message).args);\n    }\n  }\n\n  getConsoleElementForWebPreview(webPreviewElement) {\n    return this.consoleElements[webPreviewElement.console];\n  }\n\n  getWebPreviewElementForCodeElement(codeElement) {\n    return this.webPreviewElements[codeElement.processor];\n  }\n\n  updateWebPreviewElement(webPreviewElement) {\n    //load a file or code blocks?\n    if(webPreviewElement.file) {\n      if(this.outputPath && webPreviewElement.needsOutputPathPrefix) {\n        return webPreviewElement.updateUrl(path.join(this.outputPath, webPreviewElement.file));\n      }\n      return webPreviewElement.updateUrl(webPreviewElement.file);\n    }\n\n    //gather all the code for this element\n    const blocks = [];\n    for(const key in this.codeElements)\n    {\n      const codeElement = this.codeElements[key];\n      if(codeElement.processor === webPreviewElement.id)\n      {\n        const block = {\n          language: codeElement.language,\n          code: codeElement.getValue()\n        };\n        blocks.push(block);\n      }\n    }\n    webPreviewElement.updateCode(blocks);\n  }\n\n}\n","require(`es6-promise`).polyfill();\n\nimport Presentation from './classes/Presentation';\nimport SlidesFolderParser from '../../server/classes/SlidesFolderParser';\n\n(() => {\n\n  const remote = requireNode(`electron`).remote;\n  const presentationPath = remote.getGlobal(`__dirname`);\n  const path = requireNode(`path`);\n\n  const init = () => {\n    const settings = {\n      presentationPath: presentationPath,\n      // mobileServerUrl: 'https://bbridges.herokuapp.com',\n      // mobileServerUrl: `http://localhost:5000`,\n      // mobileServerUsername: `wouter.verweirder@gmail.com`,\n      // mobileServerPassword: `geheim`\n    };\n    const slidesFolderParser = new SlidesFolderParser();\n    slidesFolderParser.parse(presentationPath, path.resolve(presentationPath, `slides`))\n      .then(data => {\n        new Presentation(data, `presentation`, settings);\n      });\n  };\n\n  init();\n})();\n","let requireNode;\nif(!(typeof window !== `undefined` && window)) {\n  requireNode = require;\n} else {\n  requireNode = window.requireNode;\n}\n\nconst fs = requireNode(`fs-promise`);\nconst path = requireNode(`path`);\n\nconst getFileProperties = filePath => {\n  let _fd, _o;\n  return fs.open(filePath, `r`)\n    .then(fd => {\n      _fd = fd;\n      return fd;\n    })\n    .then(fd => fs.fstat(fd))\n    .then(o => {\n      _o = o;\n      return _o;\n    })\n    .then(() => fs.close(_fd))\n    .then(() => {\n      return {\n        path: filePath,\n        isDirectory: _o.isDirectory(),\n        isFile: _o.isFile()\n      };\n    });\n};\nexport default class SlidesFolderParser {\n  constructor() {\n  }\n  parse(presentationPath, slidesFolderPath) {\n    //read the contents of the slides directory\n    return fs.readdir(slidesFolderPath)\n      .then(result => result.filter(name => name.indexOf(`.`) > 0))\n      .then(result => result.map(name => path.resolve(slidesFolderPath, name)))\n      .then(result => Promise.all(result.map(filePath => getFileProperties(filePath))))\n      .then(result => {\n        const data = {\n          slides: []\n        };\n        const slidesByName = {};\n        result.forEach(props => {\n          const slide = this.createSlideObjectBasedOnFileProperties(props, presentationPath, slidesByName);\n          if(!slidesByName[slide.name]) {\n            data.slides.push(slide);\n          }\n          slidesByName[slide.name] = slide;\n        });\n        // console.log(data.slides);\n        return data;\n      })\n      .catch(e => {\n        console.error(e);\n      });\n  }\n\n  parseSlideBaseName(slideBaseName) {\n    const parsed = {};\n    parsed.ext = path.extname(slideBaseName);\n    parsed.name = slideBaseName.substr(0, slideBaseName.length - parsed.ext.length);\n    const splitted = parsed.name.split(`.`);\n    const keywords = [`mobile`, `desktop`, `muted`, `loop`, `cover`];\n    keywords.forEach(keyword => {\n      const index = splitted.indexOf(keyword);\n      if(index > -1) {\n        parsed[keyword] = true;\n        splitted.splice(index, 1);\n      }\n    });\n    parsed.name = splitted.join(`.`);\n    return parsed;\n  }\n\n  createSlideObjectBasedOnFileProperties(fileProperties, presentationPath, slidesByName) {\n\n    const parsed = this.parseSlideBaseName(path.basename(fileProperties.path));\n    let url = path.relative(presentationPath, fileProperties.path).replace(`\\\\`, `/`);\n    if(parsed.ext === `.jpg` || parsed.ext === `.jpeg` || parsed.ext === `.gif` || parsed.ext === `.png`) {\n      url = `slides-builtin/image.html?image=${  url}`;\n    }\n    if(parsed.ext === `.mp4`) {\n      url = `slides-builtin/video.html?video=${  url}`;\n    }\n    if(slidesByName[parsed.name]) {\n      if(parsed.mobile) {\n        slidesByName[parsed.name].mobile.url = url;\n        slidesByName[parsed.name].mobile.explicit = true;\n      } else if(parsed.desktop) {\n        slidesByName[parsed.name].presentation.url = url;\n        slidesByName[parsed.name].presentation.explicit = true;\n      } else {\n        //set the one which is not set explicitly\n        if(slidesByName[parsed.name].mobile.explicit) {\n          slidesByName[parsed.name].presentation.url = url;\n        } else {\n          slidesByName[parsed.name].mobile.url = url;\n        }\n        return slidesByName[parsed.name];\n      }\n    }\n\n    return {\n      name: parsed.name,\n      presentation: {\n        url: url,\n        explicit: false\n      },\n      mobile: {\n        url: url,\n        explicit: false\n      }\n    };\n  }\n}\n","export const Constants = {\n  GO_TO_PREVIOUS_SLIDE: `goToPreviousSlide`,\n  GO_TO_NEXT_SLIDE: `goToNextSlide`,\n  SET_SLIDES: `setSlides`,\n  SET_CURRENT_SLIDE_INDEX: `setCurrentSlideIndex`,\n\n  MESSAGE: `message`,\n  SOCKET_SEND: `socketSend`,\n  SOCKET_RECEIVE: `socketReceive`,\n  JOIN_SLIDE_ROOM: `joinSlideRoom`,\n  LEAVE_SLIDE_ROOM: `leaveSlideRoom`,\n\n  ROLE_PRESENTATION: `presentation`,\n  ROLE_MOBILE: `mobile`,\n\n  STATE_ACTIVE: `active`,\n  STATE_INACTIVE: `inactive`,\n\n  SET_SUBSTATE: `setSubstate`,\n\n  CHILD_APP_SAVE_CODE: `childAppSaveCode`,\n  CHILD_APP_RUN_CODE: `childAppRunCode`,\n  CHILD_APP_STDOUT_DATA: `childAppStdoutData`,\n  CHILD_APP_STDERR_DATA: `childAppStderrData`,\n\n  OPEN_COMMAND_LINE: `openCommandLine`,\n  OPEN_CAMERA: `openCamera`,\n\n  BLINK: `blink`,\n\n  HEART_RATE_POLAR: `heartRatePolar`,\n\n  SET_TEAM: `setTeam`,\n  UPDATE_MOTION: `updateMotion`,\n\n  YOU_WIN: `youWin`,\n  YOU_LOSE: `youLose`,\n\n  SHAKE_YOUR_PHONES_INTRO: `shakeYourPhonesIntro`,\n  SHAKE_YOUR_PHONES_GAME: `shakeYourPhonesGame`,\n  SHAKE_YOUR_PHONES_FINISHED: `shakeYourPhonesFinished`,\n\n  SHAKE_YOUR_PHONES_CLIENT_ADDED: `shakeYourPhonesClientAdded`,\n  SHAKE_YOUR_PHONES_CLIENT_REMOVED: `shakeYourPhonesClientRemoved`,\n  SHAKE_YOUR_PHONES_CLIENT_LIST: `shakeYourPhonesClientList`,\n  SHAKE_YOUR_PHONES_CLIENT_UPDATE: `shakeYourPhonesClientUpdate`\n};\n","import {Constants} from '../Constants';\n\nexport default class ContentBase{\n\n  constructor($slideHolder) {\n    this.$slideHolder = $slideHolder;\n    this.slideHolder = this.$slideHolder[0];\n    this.width = this.slideHolder.offsetWidth;\n    this.height = this.slideHolder.offsetHeight;\n    this.prevWidth = this.width;\n    this.prevHeight = this.height;\n    this.widthChanged = false;\n    this.heightChanged = false;\n    this.sizeChanged = false;\n    this.src = $slideHolder.attr(`data-src`);\n    this.name = $slideHolder.attr(`data-name`);\n    this.settings = {};\n    try {\n      this.settings = JSON.parse($(`#presentation`).attr(`data-presentation-settings`));\n    } catch (e) {\n      console.error(e);\n    }\n    this.fps = 60;\n    this._animationFrameId = false;\n    this._currentTime = 0;\n    this._delta = 0;\n    this._interval = false;\n    this._lastTime = new Date().getTime();\n    this.currentFrame = 0;\n\n    this.startListeningForMessages();\n\n    this.__drawLoop = this._drawLoop.bind(this);\n    this._interval = 1000 / this.fps;\n\n    window.requestAnimationFrame(() => {\n      $slideHolder.trigger(`load`);\n    });\n  }\n\n  startListeningForMessages() {\n    this._slideHolderMessageToSlideHandler = this.slideHolderMessageToSlideHandler.bind(this);\n    this.$slideHolder.on(`message-to-slide`, this._slideHolderMessageToSlideHandler);\n  }\n\n  stopListeningForMessages() {\n    this.$slideHolder.off(`message-to-slide`, this._slideHolderMessageToSlideHandler);\n  }\n\n  slideHolderMessageToSlideHandler(event, message) {\n    this.receiveMessage({data: message});\n  }\n\n  receiveMessage(event) {\n    if(!event.data) {\n      return;\n    }\n    switch(event.data.action) {\n    case `setState`:\n      this.setState(event.data.state);\n      break;\n    case `destroy`:\n      this.destroy();\n      break;\n    case Constants.SOCKET_RECEIVE:\n      this.receiveSocketMessage(event.data.message);\n      break;\n    default:\n      this.handleMessage(event.data);\n      break;\n    }\n  }\n\n  destroy() {\n    this.stopListeningForMessages();\n    window.cancelAnimationFrame(this._animationFrameId);\n  }\n\n  postMessage(data) {\n    this.$slideHolder.trigger(`message-from-slide`, data);\n  }\n\n  handleMessage(data) { // eslint-disable-line no-unused-vars\n  }\n\n  postSocketMessage(message) {\n    this.postMessage({\n      action: Constants.SOCKET_SEND,\n      message: message\n    });\n  }\n\n  receiveSocketMessage(message) { // eslint-disable-line no-unused-vars\n    //console.log('receiveSocketMessageame, message);\n  }\n\n  setState(state) {\n    if(state !== this.state) {\n      this.state = state;\n      this.onStateChanged();\n      if(this.state === Constants.STATE_ACTIVE) {\n        this.currentFrame = 0;\n        this._drawLoop();\n      } else {\n        window.cancelAnimationFrame(this._animationFrameId);\n      }\n    }\n  }\n\n  onStateChanged() {\n  }\n\n  _drawLoop() {\n    this._animationFrameId = window.requestAnimationFrame(this.__drawLoop);\n    this._currentTime = (new Date()).getTime();\n    this._delta = (this._currentTime - this._lastTime);\n    if(this._delta > this._interval) {\n      this.currentFrame++;\n      this.prevWidth = this.width;\n      this.prevHeight = this.height;\n      this.width = this.slideHolder.offsetWidth;\n      this.height = this.slideHolder.offsetHeight;\n      this.widthChanged = (this.width !== this.prevWidth);\n      this.heightChanged = (this.height !== this.prevHeight);\n      this.sizeChanged = (this.widthChanged || this.heightChanged);\n      this.drawLoop(this._delta);\n      this._lastTime = this._currentTime - (this._delta % this._interval);\n    }\n  }\n\n  drawLoop(delta) { // eslint-disable-line no-unused-vars\n  }\n\n}\n","import fetch from 'isomorphic-fetch';\n\nexport default class MobileServerBridge {\n\n  constructor(presentation, settings) {\n    this.presentation = presentation;\n    this.settings = settings;\n    this.connect();\n  }\n\n  connect() {\n    if (!this.settings.mobileServerUrl) {\n      return;\n    }\n    console.log(`MobileServerBridge.connect`);\n    //console.warn('MobileServerBridge disabled');\n    //return;\n    //post to the api\n    fetch(`${this.settings.mobileServerUrl}/login`, {\n      method: `POST`,\n      body: JSON.stringify(this.getLoginCredentials()),\n      headers: new Headers({'Content-Type': `application/json`})\n    })\n    .then(response => response.json())\n    .then(result => this.loginHandler(result))\n    .catch(() => {\n      //retry after one second\n      setTimeout(() => this.connect(), 1000);\n    });\n  }\n\n  getLoginCredentials() {\n    return {\n      email: this.settings.mobileServerUsername,\n      password: this.settings.mobileServerPassword,\n    };\n  }\n\n  loginHandler(result) {\n    this.token = result.token;\n    this.socket = io(this.settings.mobileServerUrl, {\n      query: `token=${  this.token}`,\n      reconnection: false,\n      forceNew: true\n    });\n    this.socket.on(`connect`, this.socketConnectHandler.bind(this));\n    this.socket.on(`disconnect`, this.socketDisconnectHandler.bind(this));\n    this.socket.on(`message`, this.socketMessageHandler.bind(this));\n  }\n\n  socketConnectHandler() {\n    console.log(`MobileServerBridge.socketConnectHandler`);\n    this.presentation.mobileServerBridgeConnected();\n  }\n\n  socketDisconnectHandler() {\n    this.connect();\n  }\n\n  tryToSend() {\n    if(this.socket) {\n      this.socket.emit.apply(this.socket, arguments);\n    }\n  }\n\n  socketMessageHandler(message) {\n    this.presentation.mobileServerMessageHandler(message);\n  }\n}\n","import {Constants} from '../Constants';\nimport SlideBridge from './SlideBridge';\n\nexport default class Presentation {\n  /*\n   * data: json object with slides array property\n   * role: mobile or presentation\n   */\n  constructor(data, role, settings) {\n    this.data = data;\n    this.role = role;\n    this.settings = settings;\n    $(`#presentation`).attr(`data-presentation-settings`, JSON.stringify(settings));\n    this.currentSlideIndex = -1;\n    this.slideHolders = [];\n    this.numSlideHolders = 3;\n    this.slideBridges = [];\n    this.slideBridgesBySlideName = {};\n\n    this.createSlideHolders();\n    this.createSlideBridges(this.data);\n\n    this.mobileServerBridge = this.createMobileServerBridge();\n    this.startListeningForMessages();\n\n    this.setCurrentSlideIndex(0);\n  }\n\n  startListeningForMessages() {\n    window.addEventListener(`message`, this.slideMessageHandler.bind(this), false);\n  }\n\n  createSlideHolders() {\n    for(let i = 0; i < this.numSlideHolders; i++) {\n      const $slideHolder = $(`<div class=\"slide-frame\" />`);\n      this.slideHolders.push($slideHolder);\n      $(`#presentation`).append($slideHolder);\n    }\n  }\n\n  createSlideBridges(data) {\n    const numSlides = data.slides.length;\n    for(let i = 0; i < numSlides; i++) {\n      const slideBridge = this.createSlideBridge(data.slides[i]);\n      this.slideBridges.push(slideBridge);\n      this.slideBridgesBySlideName[slideBridge.name] = slideBridge;\n    }\n  }\n\n  createSlideBridge(slide) {\n    return new SlideBridge(slide);\n  }\n\n  slideMessageHandler(event) {\n    if(!event.data) {\n      return;\n    }\n    switch(event.data.action) {\n    case Constants.SOCKET_SEND:\n      if(this.mobileServerBridge) {\n        this.mobileServerBridge.tryToSend(Constants.MESSAGE, event.data.message);\n      }\n      break;\n    }\n  }\n\n  mobileServerBridgeConnected() {\n    //join the rooms of the slideHolders\n    for(let i = 0; i < this.numSlideHolders; i++) {\n      this.mobileServerBridge.tryToSend(Constants.JOIN_SLIDE_ROOM, $(this.slideHolders[i]).attr(`data-name`));\n    }\n  }\n\n  mobileServerMessageHandler(message) {\n    if(message.target.slide) {\n      //slide has to handle the message\n      const slideBridge = this.getSlideBridgeByName(message.target.slide);\n      if(slideBridge) {\n        slideBridge.tryToPostMessage({\n          action: Constants.SOCKET_RECEIVE,\n          message: message\n        });\n      }\n    } else {\n      //presentation has to handle the message\n      this.handleMobileServerMessage(message);\n    }\n  }\n\n  handleMobileServerMessage(message) {\n    console.log(`[shared/Presentation] handleMobileServerMessage`, message);\n  }\n\n  getSlideBridgeByIndex(index) {\n    if(index >= 0 && index < this.slideBridges.length) {\n      return this.slideBridges[index];\n    }\n    return false;\n  }\n\n  getSlideBridgeByName(slideName) {\n    return this.slideBridgesBySlideName[slideName];\n  }\n\n  getSlideHolderForSlide(slide, slidesNotToClear) {\n    if(slide) {\n      let $slideHolder = $(`.slide-frame[data-name=\"${  slide.name  }\"]`);\n      if($slideHolder.length > 0) {\n        return $slideHolder[0];\n      }\n      //get a free slideHolder\n      const slideNamesNotToClear = [];\n      $(slidesNotToClear).each(function(index, obj){\n        slideNamesNotToClear.push(obj.name);\n      });\n      const $slideHolders = $(`.slide-frame`);\n      for (let i = $slideHolders.length - 1; i >= 0; i--) {\n        $slideHolder = $($slideHolders[i]);\n        const name = $slideHolder.attr(`data-name`);\n        if(!name || slideNamesNotToClear.indexOf(name) === -1) {\n          return $slideHolder[0];\n        }\n      }\n    }\n    return false;\n  }\n\n  goToPreviousSlide() {\n    this.setCurrentSlideIndex(this.currentSlideIndex - 1);\n  }\n\n  goToNextSlide() {\n    this.setCurrentSlideIndex(this.currentSlideIndex + 1);\n  }\n\n  setCurrentSlideIndex(value) {\n    value = Math.max(0, Math.min(value, this.slideBridges.length - 1));\n    if(value !== this.currentSlideIndex) {\n      this.currentSlideIndex = value;\n\n      const currentSlideBridge = this.getSlideBridgeByIndex(this.currentSlideIndex);\n      const previousSlideBridge = this.getSlideBridgeByIndex(this.currentSlideIndex - 1);\n      const nextSlideBridge = this.getSlideBridgeByIndex(this.currentSlideIndex + 1);\n\n      //remove \"used\" class from slide holders\n      $(`.slide-frame`).removeAttr(`data-used`, false);\n\n      const currentSlideHolder = this.getSlideHolderForSlide(currentSlideBridge, [previousSlideBridge, nextSlideBridge]);\n      this.setupSlideHolder(currentSlideHolder, currentSlideBridge, Constants.STATE_ACTIVE, 0);\n\n      const previousSlideHolder = this.getSlideHolderForSlide(previousSlideBridge, [currentSlideBridge, nextSlideBridge]);\n      this.setupSlideHolder(previousSlideHolder, previousSlideBridge, Constants.STATE_INACTIVE, `-100%`);\n\n      const nextSlideHolder = this.getSlideHolderForSlide(nextSlideBridge, [previousSlideBridge, currentSlideBridge]);\n      this.setupSlideHolder(nextSlideHolder, nextSlideBridge, Constants.STATE_INACTIVE, `100%`);\n\n      //clear attributes of unused slide frames\n      $(`.slide-frame`).each(function(index, slideHolder){\n        if(!$(slideHolder).attr(`data-used`)) {\n          $(slideHolder).removeAttr(`data-used`).removeAttr(`data-name`).removeAttr(`data-src`);\n        }\n      });\n\n      //all other slideHolder bridges should be unlinked from their slideHolder\n      this.slideBridges.forEach(function(slideBridge){\n        if(slideBridge === currentSlideBridge) {\n          return;\n        }\n        if(slideBridge === previousSlideBridge) {\n          return;\n        }\n        if(slideBridge === nextSlideBridge) {\n          return;\n        }\n        slideBridge.slideHolder = null;\n      });\n\n      bean.fire(this, Constants.SET_CURRENT_SLIDE_INDEX, [this.currentSlideIndex]);\n    }\n  }\n\n  setupSlideHolder(slideHolder, slideBridge, state, left) {\n    if(slideHolder) {\n      let src = `slides/${  slideBridge.name  }.html`;\n      if(slideBridge.data[this.role] && slideBridge.data[this.role].url) {\n        src = slideBridge.data[this.role].url;\n      }\n      src = this.processSlideSrc(src);\n      if(slideBridge.isAlreadyCorrectlyAttached(slideHolder, src)) {\n        //console.log(slideBridge.name + ' already attached');\n      } else {\n        this.attachToSlideHolder(slideHolder, slideBridge, src);\n      }\n      slideBridge.setState(state);\n      $(slideHolder).css(`left`, left);\n      $(slideHolder).attr(`data-used`, 1);\n    }\n  }\n\n  attachToSlideHolder(slideHolder, slideBridge, src) {\n    //listen for events on this slideHolder\n    $(slideHolder).off(`message-from-slide`);\n    $(slideHolder).on(`message-from-slide`, (event, message) =>  {\n      this.slideMessageHandler({data: message});\n    });\n    //leave previous channel of this slideHolder\n    if(this.mobileServerBridge) {\n      this.mobileServerBridge.tryToSend(Constants.LEAVE_SLIDE_ROOM, $(slideHolder).attr(`data-name`));\n    }\n    //add the join as a callback for the onload event\n    slideBridge.attachToSlideHolder(slideHolder, src, this.slideLoaded.bind(this, slideHolder, slideBridge, src));\n  }\n\n  slideLoaded(slideHolder, slideBridge) { // eslint-disable-line no-unused-vars\n    //join new channel\n    if(this.mobileServerBridge) {\n      this.mobileServerBridge.tryToSend(Constants.JOIN_SLIDE_ROOM, $(slideHolder).attr(`data-name`));\n    }\n  }\n\n  processSlideSrc(src) {\n    return src;\n  }\n\n  createMobileServerBridge() {\n    //to implement in extending classes\n  }\n}\n","import fetch from 'isomorphic-fetch';\n\nexport default class SlideBridge {\n  constructor(data) {\n    this.data = data;\n    this.name = this.data.name;\n  }\n\n  isAlreadyCorrectlyAttached(slideHolder, src) {\n    return (this.slideHolder === slideHolder && $(slideHolder).attr(`data-name`) === this.name && $(slideHolder).attr(`data-src`) === src);\n  }\n\n  attachToSlideHolder(slideHolder, src, cb) {\n    this.slideHolder = slideHolder;\n    //notify the content it is being cleared\n    this.tryToPostMessage({action: `destroy`});\n    //clear the current content\n    this.slideHolder.innerHTML = ``;\n    $(slideHolder).attr(`data-name`, this.name);\n    $(slideHolder).addClass(`loading`);\n\n    $(slideHolder).off(`load`);\n    $(slideHolder).on(`load`, () => {\n      this.tryToPostMessage({\n        action: `setState`,\n        state: this.state\n      });\n      $(slideHolder).off(`load`);\n    });\n\n    if(src !== $(slideHolder).attr(`data-src`)) {\n      //fetch the html\n      fetch(src)\n        .then(result => result.text())\n        .then(result => $(result))\n        .then($result => {\n          $(slideHolder).html($result.html());\n          $(slideHolder).removeClass(`loading`);\n          cb();\n        })\n        .catch(err => {\n          console.error(err);\n          $(slideHolder).removeClass(`loading`);\n          cb();\n        });\n      $(slideHolder).attr(`data-src`, src);\n    }\n  }\n\n  tryToPostMessage(message) {\n    if(!this.slideHolder)\n    {\n      console.log(`${this.name  } post fail`);\n      return;\n    }\n    //trigger with jquery\n    $(this.slideHolder).trigger(`message-to-slide`, message);\n  }\n\n  setState(state) {\n    this.state = state;\n    this.tryToPostMessage({\n      action: `setState`,\n      state: this.state\n    });\n  }\n}\n","import {Constants} from '../../../../shared/js/Constants';\nimport ContentBase from '../../../../shared/js/classes/ContentBase';\n\nimport LiveCode from '../live-code';\n\nexport default class LiveCodeSlide extends ContentBase {\n\n  constructor($slideHolder, config, readyCallback) {\n    super($slideHolder);\n\n    const remote = requireNode(`electron`).remote;\n    const config2 = {...config, presentationPath: remote.getGlobal(`__dirname`)};\n\n    //find live code element\n    this.liveCode = new LiveCode(this.$slideHolder.find(`.live-code`), config2, readyCallback);\n  }\n\n  layout() {\n    this.liveCode.layout();\n  }\n\n  destroy() {\n    super.destroy();\n    this.liveCode.destroy();\n  }\n\n  onStateChanged() {\n    if(this.state === Constants.STATE_ACTIVE) {\n      this.liveCode.resume();\n    } else {\n      //stop\n      this.liveCode.pause();\n    }\n  }\n\n}\n","import {Constants} from '../../../../shared/js/Constants';\nimport ContentBase from '../../../../shared/js/classes/ContentBase';\n\nconst getParameterByName = (url, name) => {\n  name = name.replace(/[\\[]/, `\\\\[`).replace(/[\\]]/, `\\\\]`);\n  const regex = new RegExp(`[\\\\?&]${  name  }=([^&#]*)`),\n    results = regex.exec(url);\n  return results == null ? `` : decodeURIComponent(results[1].replace(/\\+/g, ` `));\n};\n\nexport default class VideoSlide extends ContentBase {\n\n  constructor($slideHolder) {\n    super($slideHolder);\n\n    this.videoPlaying = false;\n    const videoUrl = getParameterByName(this.src, `video`);\n\n    //check for extra config in the filename\n    let loop = false;\n    let muted = false;\n    const videoUrlSplitted = videoUrl.split(`.`);\n    videoUrlSplitted.forEach(part => {\n      if(part === `loop`) {\n        loop = true;\n      }\n      if(part === `muted`) {\n        muted = true;\n      }\n    });\n\n    this.video = this.$slideHolder.find(`video`)[0];\n    if(loop) {\n      $(this.video).attr(`loop`, `loop`);\n    }\n    if(muted) {\n      $(this.video).attr(`muted`, `muted`);\n    }\n    $(this.video).attr(`src`, videoUrl);\n    this._clickHandler = () => this.toggleVideoPlaying();\n    $(this.video).on(`click`, this._clickHandler);\n  }\n\n  destroy() {\n    super.destroy();\n    $(this.video).off(`click`, this._clickHandler);\n  }\n\n  onStateChanged() {\n    if(this.state === Constants.STATE_ACTIVE) {\n      this.setVideoPlaying(true);\n    } else {\n      this.setVideoPlaying(false);\n    }\n  }\n\n  setVideoPlaying(value) {\n    if(value !== this.videoPlaying) {\n      this.videoPlaying = value;\n      if(this.videoPlaying) {\n        this.video.play();\n      } else {\n        this.video.pause();\n      }\n    }\n  }\n\n  toggleVideoPlaying() {\n    this.setVideoPlaying(!this.videoPlaying);\n  }\n\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}